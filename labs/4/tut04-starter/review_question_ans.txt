
Question 1: 
Order of statements:
The order will be: 
1. '1' is logged first because it's a synchronous operation inside the promise executor.
2. '3' is logged next because the promise's .then() function waits for the promise resolution asynchronously.
3. After 1 second, '2' is logged when the promise resolves.

Question 2: 
If the button is not clicked within 5 seconds, the promise will be rejected by the setTimeout() function, and 'Option B' will be logged to the console. The event listener for the button click won't trigger since no click happens before timeout.

Question 3: 
If the button is clicked after 5 seconds, the promise will already be rejected because of the setTimeout(). 'Option B' will still be logged, and the 'clicked!' message will be printed, but the click won't affect the promise result because it happens too late.

Question 4: 
The console will log the value '36'. 
Explanation: 
1. The promise resolves with 1.
2. The first .then() adds 5 to the value (result: 6).
3. The second .then() multiplies the result by 6 (result: 36).
4. Finally, '36' is logged to the console.

Question 5: 
The console will log '6'. 
Explanation: 
1. The promise resolves with 1.
2. The first .then() creates a new promise that adds 5 to the value (result: 6).
3. The second .then() logs the resolved value of the new promise, which is 6.

Question 6: 
The order will be:
1. '1' is logged first because it's synchronous inside the promise executor.
2. '3' is logged next because it's outside the promise and synchronous.
3. '2' is logged last after the promise resolves asynchronously.
